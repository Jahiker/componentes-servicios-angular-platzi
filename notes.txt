# COMPONENTES Y SERVICIOS EN ANGULAR

=========================================================================================================

## COMPONENTES
-- Son la parte mas enscencial e importante para desarrollar tus componente en angular
-- No es buena parctica tener logica y vista en un mismo archivo
-- Los componentes deben tener responsabilidades unicas
-- Los componentes Angular estan formados por 4 archivos
-- file.component.html => es la vista
-- file.component.scss => estilos css
-- file.component.spec.ts => es un archivo para hacer pruebas
-- file.component.ts => el archivo que tiene toda la logica y une la vista, los estilos y la logica
-- cada componente solo puede pertenecer a un unico modulo

-- Para crear un componente con el CLI de Angular debemos ejecutar: ng g c component-name => g = generate | c = component

=========================================================================================================

## PARTES DE UN COMPONENTE
-- Uso del decorador @Component() => enlaza la vista, los estilos y la logica
-- Para llamar a un componente desde otro componente debemos hacerlo con el selector definino en el component.ts

=========================================================================================================

## USO DE LOS INPUTS EN COMPONENTES

Para comunicar componentes, Angular hace uso de decoradores para intercambiar información entre un componente padre hacia un componente hijo y viceversa.

Comunicando componentes
Para enviar información de padre a hijo, puedes utilizar el decorador @Input() para marcar una propiedad de una clase como punto de entrada de un dato.

<p style=‘text-align:center;’>
<img src=“https://cdn.document360.io/da52b302-22aa-4a71-9908-ba18e68ffee7/Images/Documentation/Screenshot from 2022-04-05 22-42-58.png” alt=“Envio de datos componente padre a hijo”>
</p>

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-test-name',
  templateUrl: './test-name.component.html',
  styleUrls: ['./test-name.component.less']
})
export class TestNameComponent {

  @Input() firstname: string;

  constructor() { }
}

Debes importar Input desde @angular/core para poder utilizar esta directiva e indicar que la propiedad firstname es un dato que el componente padre enviará.

Podrás inicializar el componente desde su padre y pasarle los inputs que este necesite de la siguiente manera:

<app-test-name>
    firstname="Platzi"
</app-test-name>

También puedes cambiar el nombre el Input especificando el nombre de la propiedad que quieras que este utilice al inicializar el componente.

@Input('my-name') firstname: string;

<app-test-name>
    my-name="Platzi"
</app-test-name>

Data binding en Inputs
El decorador @Input() detectará cualquier cambio en el dato y automáticamente actualizará su valor. Si ocurre algún evento en el componente padre que cambie el valor en el Input firstname, el componente hijo recibirá inmediatamente ese nuevo valor.

Input Set
Otra manera de utilizar la directiva @Input es de la siguiente manera:

@Input() set saludar(firstname: string) {
        console.log('Hola', firstname)
};

Observa que en esta oportunidad, cada vez que se envía un valor al @Input, se ejecutará la función saludar() que recibe como parámetro el valor que se le haya enviado.

De esta manera, puedes ejecutar la lógica que necesites dentro de esta función cada vez que el valor del @Inputcambia.

=========================================================================================================

## USO DE OUTPUTS

Así como el decorador @Input permite el envío de información desde un componente padre hacia un componente hijo, el uso de @Outputs permite lo contrario.

Comunicación hijo a padre
A partir de la emisión de un evento, el decorador @Output() permite enviar mensajes desde un componente hijo hacia el padre.

Envío del mensaje
Para esto, se hace uso de la clase EventEmitter importándola desde @angular/core, para crear en tu componente una propiedad emisora de eventos.

import { Component, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-test-name',
  templateUrl: './test-name.component.html',
  styleUrls: ['./test-name.component.less']
})
export class TestNameComponent {

  @Output() message = new EventEmitter<string>();

  constructor() { }
}

Decorando la propiedad con el @Output() y creando una instancia de EventEmitter podrás emitir un evento de la siguiente manera:

    emitirEvento() {
        this.message.emit('Hola soy Platzi');
    }

Llamando al método emit() de la instancia EventEmitter, se enviará el valor al componente padre que se encuentre escuchando el evento.

Recepción del mensaje
Desde el componente padre, inicializa el componente hijo de la siguiente manera:

<app-test-name>
    (message)="recibirMensaje($event)"
</app-test-name>

Se “bindea” la propiedad emisora de eventos con () y se le pasa una función que se ejecutará cada vez que emita un evento.
Y en el componente padre:

import { Component } from '@angular/core';

@Component({
  selector: 'app-father',
  templateUrl: './father.component.html',
  styleUrls: ['./father.component.less']
})
export class FatherComponent {

  constructor() { }

  recibirMensaje(event: Event) {
    console.log(event);
  }
}

La función recibirMensaje() posee un parámetro del tipo Event que contendrá el mensaje del componente hijo.

=========================================================================================================

